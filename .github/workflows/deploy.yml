name: Build → Deploy → Notify

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/miroslavnecas/website

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.meta.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        run: echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}         # private key
          port: ${{ secrets.SSH_PORT }}       # e.g., 22
          script: |
            # optional GHCR login if your image is private
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin || true

            cd /root/website  # adjust to your compose folder
            # ensure compose file references the GHCR image tag `latest` or `${{ needs.build_and_push.outputs.sha }}`
            docker compose pull
            docker compose up -d
            docker image prune -f

      - name: Notify n8n
        if: always()
        run: |
          STATUS="${{ job.status }}"
          curl -sS -X POST "$N8N_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
                  --arg repo "${{ github.repository }}" \
                  --arg ref  "${{ github.ref }}" \
                  --arg sha  "${{ needs.build_and_push.outputs.sha }}" \
                  --arg run  "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                  --arg status "$STATUS" \
                  --arg secret "$N8N_SECRET" \
                  '{repo:$repo, ref:$ref, sha:$sha, run_url:$run, status:$status, secret:$secret}')"
        env:
          N8N_URL: ${{ secrets.N8N_WEBHOOK_URL }}
          N8N_SECRET: ${{ secrets.N8N_WEBHOOK_SECRET }}
